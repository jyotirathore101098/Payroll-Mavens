{"ast":null,"code":"var _jsxFileName = \"/Users/jyotirathore101098/Documents/Payroll_Mavens/frontend/src/pages/reports/ReportsPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import \"./ReportsPage.css\";\n\n// const API_BASE_URL = \"http://localhost:3000/api/reports\";\n\n// const ReportsPage = () => {\n//   const [reports, setReports] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchReports();\n//   }, []);\n\n//   const fetchReports = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const res = await axios.get(API_BASE_URL, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setReports(res.data);\n//     } catch (err) {\n//       setError(\n//         err.response?.data?.message || err.message || \"Failed to fetch reports\"\n//       );\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"reports-container\">\n//       <h2 className=\"reports-title\">Available Reports</h2>\n//       {loading ? (\n//         <div className=\"reports-loading\">Loading...</div>\n//       ) : error ? (\n//         <div className=\"reports-error\">{error}</div>\n//       ) : (\n//         <table className=\"reports-table\">\n//           <thead>\n//             <tr>\n//               <th>Report ID</th>\n//               <th>Type</th>\n//               <th>Description</th>\n//               <th>Download</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {reports.length === 0 ? (\n//               <tr>\n//                 <td colSpan=\"5\" style={{ textAlign: \"center\", color: \"#888\" }}>\n//                   No reports found.\n//                 </td>\n//               </tr>\n//             ) : (\n//               reports\n//                 .filter(\n//                   (report) =>\n//                     report.id !== \"payslip\" &&\n//                     report.id !== \"compliance\" &&\n//                     report.id !== \"payroll_summary\"\n//                 )\n//                 .map((report) => (\n//                   <tr key={report.id}>\n//                     <td>{report.id}</td>\n//                     <td>{report.name}</td>\n//                     <td>{report.description}</td>\n//                     <td>\n//                       {report.id === \"leaves_csv\" ? (\n//                         <button\n//                           className=\"reports-download-btn\"\n//                           onClick={async () => {\n//                             const token = localStorage.getItem(\"token\");\n//                             try {\n//                               // Fetch leave data from leave API\n//                               const leaveRes = await axios.get(\"http://localhost:3000/api/leaves\", {\n//                                 headers: { Authorization: `Bearer ${token}` }\n//                               });\n//                               const leaves = leaveRes.data;\n//                               // Format CSV using papaparse\n//                               const Papa = require('papaparse');\n//                               const headers = [\"LeaveID\",\"UserID\",\"LeaveType\",\"LeaveDays\",\"MonthYear\",\"CreatedAt\"];\n//                               const csvContent = Papa.unparse(leaves, {\n//                                 quotes: true,\n//                                 header: true,\n//                                 columns: headers\n//                               });\n//                               const blob = new Blob([csvContent], { type: \"text/csv\" });\n//                               const blobUrl = window.URL.createObjectURL(blob);\n//                               const link = document.createElement(\"a\");\n//                               link.href = blobUrl;\n//                               link.setAttribute(\"download\", \"leaves.csv\");\n//                               document.body.appendChild(link);\n//                               link.click();\n//                               link.remove();\n//                             } catch (err) {\n//                               alert(\"Download failed: \" + (err.response?.data?.message || err.message));\n//                             }\n//                           }}\n//                         >\n//                           Download\n//                         </button>\n//                       ) : report.id === \"salary_adjustment_csv\" ? (\n//                         <button\n//                           className=\"reports-download-btn\"\n//                           onClick={async () => {\n//                             const token = localStorage.getItem(\"token\");\n//                             try {\n//                               // Fetch salary adjustment data from API \n//                               const res = await axios.get(\"http://localhost:3000/api/salary-adjustments\", {\n//                                 headers: { Authorization: `Bearer ${token}` }\n//                               });\n//                               // If backend returns error message\n//                               if (res.data && typeof res.data === 'object' && res.data.message) {\n//                                 alert(\"Download failed: \" + res.data.message);\n//                                 return;\n//                               }\n//                               // Ensure data is an array from the model\n//                               const adjustments = Array.isArray(res.data) ? res.data : [];\n//                               if (adjustments.length === 0) {\n//                                 alert(\"No salary adjustment data available.\");\n//                                 return;\n//                               }\n//                               // Format CSV using papaparse\n//                               const Papa = require('papaparse');\n//                               // Use model fields for CSV columns\n//                               const headers = [\"AdjustmentID\",\"UserID\",\"Amount\",\"Reason\",\"MonthYear\",\"CreatedAt\"];\n//                               const formatted = adjustments.map(a => ({\n//                                 AdjustmentID: a.AdjustmentID || a.id || '',\n//                                 UserID: a.UserID || a.userId || '',\n//                                 Amount: a.Amount || a.amount || '',\n//                                 Reason: a.Reason || a.reason || '',\n//                                 MonthYear: a.MonthYear || a.monthYear || '',\n//                                 CreatedAt: a.CreatedAt || a.createdAt || ''\n//                               }));\n//                               const csvContent = Papa.unparse(formatted, {\n//                                 quotes: true,\n//                                 header: true,\n//                                 columns: headers\n//                               });\n//                               const blob = new Blob([csvContent], { type: \"text/csv\" });\n//                               const blobUrl = window.URL.createObjectURL(blob);\n//                               const link = document.createElement(\"a\");\n//                               link.href = blobUrl;\n//                               link.setAttribute(\"download\", \"salary_adjustments.csv\");\n//                               document.body.appendChild(link);\n//                               link.click();\n//                               link.remove();\n//                             } catch (err) {\n//                               alert(\"Download failed: \" + (err.response?.data?.message || err.message));\n//                             }\n//                           }}\n//                         >\n//                           Download\n//                         </button>\n//                       ) : report.endpoint ? (\n//                         <button\n//                           className=\"reports-download-btn\"\n//                           onClick={async () => {\n//                             const token = localStorage.getItem(\"token\");\n//                             try {\n//                               const url =\n//                                 report.id === \"compliance_csv\"\n//                                   ? `http://localhost:3000${report.endpoint}?month=Sep-2025`\n//                                   : `http://localhost:3000${report.endpoint}`;\n//                               const response = await axios.get(url, {\n//                                 headers: { Authorization: `Bearer ${token}` },\n//                                 responseType: \"blob\",\n//                               });\n//                               const fileName =\n//                                 report.id === \"compliance_csv\"\n//                                   ? `compliance_Sep-2025.csv`\n//                                   : `${report.id}.csv`;\n//                               const blobUrl = window.URL.createObjectURL(\n//                                 new Blob([response.data])\n//                               );\n//                               const link = document.createElement(\"a\");\n//                               link.href = blobUrl;\n//                               link.setAttribute(\"download\", fileName);\n//                               document.body.appendChild(link);\n//                               link.click();\n//                               link.remove();\n//                             } catch (err) {\n//                               alert(\n//                                 \"Download failed: \" +\n//                                   (err.response?.data?.message || err.message)\n//                               );\n//                             }\n//                           }}\n//                         >\n//                           Download\n//                         </button>\n//                       ) : (\n//                         \"-\"\n//                       )}\n//                     </td>\n//                   </tr>\n//                 ))\n//             )}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ReportsPage;\n// src/pages/ReportsPage/ReportsPage.js\nimport React, { useEffect, useState } from \"react\";\nimport { fetchReports } from \"./reportsService\";\nimport ReportsTable from \"./ReportsTable\";\nimport \"./ReportsPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportsPage = () => {\n  _s();\n  const [reports, setReports] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    loadReports();\n  }, []);\n  const loadReports = async () => {\n    setLoading(true);\n    setError(\"\");\n    try {\n      const data = await fetchReports();\n      setReports(data);\n    } catch (err) {\n      setError(err.message || \"Failed to fetch reports\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reports-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"reports-title\",\n      children: \"Available Reports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reports-loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reports-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ReportsTable, {\n      reports: reports\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n_s(ReportsPage, \"czlsAJnG/Pzi1MFkulMB1jIlB1g=\");\n_c = ReportsPage;\nexport default ReportsPage;\nvar _c;\n$RefreshReg$(_c, \"ReportsPage\");","map":{"version":3,"names":["React","useEffect","useState","fetchReports","ReportsTable","jsxDEV","_jsxDEV","ReportsPage","_s","reports","setReports","loading","setLoading","error","setError","loadReports","data","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jyotirathore101098/Documents/Payroll_Mavens/frontend/src/pages/reports/ReportsPage.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import \"./ReportsPage.css\";\n\n// const API_BASE_URL = \"http://localhost:3000/api/reports\";\n\n// const ReportsPage = () => {\n//   const [reports, setReports] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchReports();\n//   }, []);\n\n//   const fetchReports = async () => {\n//     setLoading(true);\n//     setError(\"\");\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const res = await axios.get(API_BASE_URL, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setReports(res.data);\n//     } catch (err) {\n//       setError(\n//         err.response?.data?.message || err.message || \"Failed to fetch reports\"\n//       );\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"reports-container\">\n//       <h2 className=\"reports-title\">Available Reports</h2>\n//       {loading ? (\n//         <div className=\"reports-loading\">Loading...</div>\n//       ) : error ? (\n//         <div className=\"reports-error\">{error}</div>\n//       ) : (\n//         <table className=\"reports-table\">\n//           <thead>\n//             <tr>\n//               <th>Report ID</th>\n//               <th>Type</th>\n//               <th>Description</th>\n//               <th>Download</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {reports.length === 0 ? (\n//               <tr>\n//                 <td colSpan=\"5\" style={{ textAlign: \"center\", color: \"#888\" }}>\n//                   No reports found.\n//                 </td>\n//               </tr>\n//             ) : (\n//               reports\n//                 .filter(\n//                   (report) =>\n//                     report.id !== \"payslip\" &&\n//                     report.id !== \"compliance\" &&\n//                     report.id !== \"payroll_summary\"\n//                 )\n//                 .map((report) => (\n//                   <tr key={report.id}>\n//                     <td>{report.id}</td>\n//                     <td>{report.name}</td>\n//                     <td>{report.description}</td>\n//                     <td>\n//                       {report.id === \"leaves_csv\" ? (\n//                         <button\n//                           className=\"reports-download-btn\"\n//                           onClick={async () => {\n//                             const token = localStorage.getItem(\"token\");\n//                             try {\n//                               // Fetch leave data from leave API\n//                               const leaveRes = await axios.get(\"http://localhost:3000/api/leaves\", {\n//                                 headers: { Authorization: `Bearer ${token}` }\n//                               });\n//                               const leaves = leaveRes.data;\n//                               // Format CSV using papaparse\n//                               const Papa = require('papaparse');\n//                               const headers = [\"LeaveID\",\"UserID\",\"LeaveType\",\"LeaveDays\",\"MonthYear\",\"CreatedAt\"];\n//                               const csvContent = Papa.unparse(leaves, {\n//                                 quotes: true,\n//                                 header: true,\n//                                 columns: headers\n//                               });\n//                               const blob = new Blob([csvContent], { type: \"text/csv\" });\n//                               const blobUrl = window.URL.createObjectURL(blob);\n//                               const link = document.createElement(\"a\");\n//                               link.href = blobUrl;\n//                               link.setAttribute(\"download\", \"leaves.csv\");\n//                               document.body.appendChild(link);\n//                               link.click();\n//                               link.remove();\n//                             } catch (err) {\n//                               alert(\"Download failed: \" + (err.response?.data?.message || err.message));\n//                             }\n//                           }}\n//                         >\n//                           Download\n//                         </button>\n//                       ) : report.id === \"salary_adjustment_csv\" ? (\n//                         <button\n//                           className=\"reports-download-btn\"\n//                           onClick={async () => {\n//                             const token = localStorage.getItem(\"token\");\n//                             try {\n//                               // Fetch salary adjustment data from API \n//                               const res = await axios.get(\"http://localhost:3000/api/salary-adjustments\", {\n//                                 headers: { Authorization: `Bearer ${token}` }\n//                               });\n//                               // If backend returns error message\n//                               if (res.data && typeof res.data === 'object' && res.data.message) {\n//                                 alert(\"Download failed: \" + res.data.message);\n//                                 return;\n//                               }\n//                               // Ensure data is an array from the model\n//                               const adjustments = Array.isArray(res.data) ? res.data : [];\n//                               if (adjustments.length === 0) {\n//                                 alert(\"No salary adjustment data available.\");\n//                                 return;\n//                               }\n//                               // Format CSV using papaparse\n//                               const Papa = require('papaparse');\n//                               // Use model fields for CSV columns\n//                               const headers = [\"AdjustmentID\",\"UserID\",\"Amount\",\"Reason\",\"MonthYear\",\"CreatedAt\"];\n//                               const formatted = adjustments.map(a => ({\n//                                 AdjustmentID: a.AdjustmentID || a.id || '',\n//                                 UserID: a.UserID || a.userId || '',\n//                                 Amount: a.Amount || a.amount || '',\n//                                 Reason: a.Reason || a.reason || '',\n//                                 MonthYear: a.MonthYear || a.monthYear || '',\n//                                 CreatedAt: a.CreatedAt || a.createdAt || ''\n//                               }));\n//                               const csvContent = Papa.unparse(formatted, {\n//                                 quotes: true,\n//                                 header: true,\n//                                 columns: headers\n//                               });\n//                               const blob = new Blob([csvContent], { type: \"text/csv\" });\n//                               const blobUrl = window.URL.createObjectURL(blob);\n//                               const link = document.createElement(\"a\");\n//                               link.href = blobUrl;\n//                               link.setAttribute(\"download\", \"salary_adjustments.csv\");\n//                               document.body.appendChild(link);\n//                               link.click();\n//                               link.remove();\n//                             } catch (err) {\n//                               alert(\"Download failed: \" + (err.response?.data?.message || err.message));\n//                             }\n//                           }}\n//                         >\n//                           Download\n//                         </button>\n//                       ) : report.endpoint ? (\n//                         <button\n//                           className=\"reports-download-btn\"\n//                           onClick={async () => {\n//                             const token = localStorage.getItem(\"token\");\n//                             try {\n//                               const url =\n//                                 report.id === \"compliance_csv\"\n//                                   ? `http://localhost:3000${report.endpoint}?month=Sep-2025`\n//                                   : `http://localhost:3000${report.endpoint}`;\n//                               const response = await axios.get(url, {\n//                                 headers: { Authorization: `Bearer ${token}` },\n//                                 responseType: \"blob\",\n//                               });\n//                               const fileName =\n//                                 report.id === \"compliance_csv\"\n//                                   ? `compliance_Sep-2025.csv`\n//                                   : `${report.id}.csv`;\n//                               const blobUrl = window.URL.createObjectURL(\n//                                 new Blob([response.data])\n//                               );\n//                               const link = document.createElement(\"a\");\n//                               link.href = blobUrl;\n//                               link.setAttribute(\"download\", fileName);\n//                               document.body.appendChild(link);\n//                               link.click();\n//                               link.remove();\n//                             } catch (err) {\n//                               alert(\n//                                 \"Download failed: \" +\n//                                   (err.response?.data?.message || err.message)\n//                               );\n//                             }\n//                           }}\n//                         >\n//                           Download\n//                         </button>\n//                       ) : (\n//                         \"-\"\n//                       )}\n//                     </td>\n//                   </tr>\n//                 ))\n//             )}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ReportsPage;\n// src/pages/ReportsPage/ReportsPage.js\nimport React, { useEffect, useState } from \"react\";\nimport { fetchReports } from \"./reportsService\";\nimport ReportsTable from \"./ReportsTable\";\nimport \"./ReportsPage.css\";\n\nconst ReportsPage = () => {\n  const [reports, setReports] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    loadReports();\n  }, []);\n\n  const loadReports = async () => {\n    setLoading(true);\n    setError(\"\");\n    try {\n      const data = await fetchReports();\n      setReports(data);\n    } catch (err) {\n      setError(err.message || \"Failed to fetch reports\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"reports-container\">\n      <h2 className=\"reports-title\">Available Reports</h2>\n      {loading ? (\n        <div className=\"reports-loading\">Loading...</div>\n      ) : error ? (\n        <div className=\"reports-error\">{error}</div>\n      ) : (\n        <ReportsTable reports={reports} />\n      )}\n    </div>\n  );\n};\n\nexport default ReportsPage;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdc,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IACZ,IAAI;MACF,MAAME,IAAI,GAAG,MAAMb,YAAY,CAAC,CAAC;MACjCO,UAAU,CAACM,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZH,QAAQ,CAACG,GAAG,CAACC,OAAO,IAAI,yBAAyB,CAAC;IACpD,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEN,OAAA;IAAKa,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCd,OAAA;MAAIa,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnDb,OAAO,gBACNL,OAAA;MAAKa,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,GAC/CX,KAAK,gBACPP,OAAA;MAAKa,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEP;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAE5ClB,OAAA,CAACF,YAAY;MAACK,OAAO,EAAEA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAClC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChB,EAAA,CAlCID,WAAW;AAAAkB,EAAA,GAAXlB,WAAW;AAoCjB,eAAeA,WAAW;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}