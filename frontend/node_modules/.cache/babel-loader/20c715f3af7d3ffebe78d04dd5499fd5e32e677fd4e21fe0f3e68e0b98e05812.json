{"ast":null,"code":"var _jsxFileName = \"/Users/jyotirathore101098/Documents/Payroll_Mavens/frontend/src/pages/payrollRun/PayrollRunPage.js\",\n  _s = $RefreshSig$();\n// // PayrollRunPage.js\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import './PayrollRunPage.css';\n\n// const API_BASE_URL = 'http://localhost:3000/api/payroll-runs';\n\n// const PayrollRunPage = () => {\n//   const [runs, setRuns] = useState([]);\n//   const [form, setForm] = useState({\n//     UserID: '',\n//     MonthYear: '',\n//   });\n//   const [loading, setLoading] = useState(false);\n//   const [preview, setPreview] = useState(null);\n//   const [previewLoading, setPreviewLoading] = useState(false);\n\n//   useEffect(() => {\n//     fetchRuns();\n//   }, []);\n\n//   const fetchRuns = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       const res = await axios.get(API_BASE_URL, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       setRuns(res.data);\n//     } catch (err) {\n//       alert('Failed to fetch payroll runs');\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     setForm({ ...form, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     // Frontend validation\n//     const userIdNum = Number(form.UserID);\n//     const monthYearRegex = /^[A-Za-z]{3}-\\d{4}$/;\n//     if (!userIdNum || userIdNum < 1) {\n//       alert('Please enter a valid numeric UserID.');\n//       return;\n//     }\n//     if (!monthYearRegex.test(form.MonthYear)) {\n//       alert('Please enter MonthYear in format e.g. Sep-2025.');\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const token = localStorage.getItem('token');\n//       await axios.post(API_BASE_URL, form, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       setForm({ UserID: '', MonthYear: '' });\n//       // Instead of refetching all, add preview data as new row\n//       // Always fetch latest preview before inserting row\n//       const fetchLatestPreview = async () => {\n//         try {\n//           const token = localStorage.getItem('token');\n//           // Fetch payroll base\n//           const baseRes = await axios.get(`http://localhost:3000/api/payroll-base/${form.UserID}`, {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           const base = baseRes.data;\n//           // Fetch leaves\n//           const leaveRes = await axios.get(`http://localhost:3000/api/leaves/${form.UserID}`, {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           const leaves = Array.isArray(leaveRes.data) ? leaveRes.data.filter(l => l.MonthYear === form.MonthYear) : [];\n//           const lop = leaves.filter(l => l.LeaveType === 'LOP').reduce((sum, l) => sum + Number(l.LeaveDays), 0);\n//           // Fetch salary adjustments\n//           const adjRes = await axios.get(`http://localhost:3000/api/adjustments/${form.UserID}`, {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           const adjustments = Array.isArray(adjRes.data) ? adjRes.data.filter(a => a.MonthYear === form.MonthYear) : [];\n//           const bonus = adjustments.filter(a => a.AdjustmentType === 'Bonus').reduce((sum, a) => sum + Number(a.Amount), 0);\n//           const deduction = adjustments.filter(a => a.AdjustmentType === 'Deduction').reduce((sum, a) => sum + Number(a.Amount), 0);\n//           // Calculate gross salary\n//           let grossSalary = Number(base.BasicSalary || 0) + Number(base.HRA || 0) + Number(base.DA || 0) + Number(base.OtherAllowance || 0);\n//           const lopDeduction = +(lop * (grossSalary / 30)).toFixed(2);\n//           grossSalary -= lopDeduction;\n//           const adjustedGross = grossSalary + bonus - deduction;\n//           const PF = +(adjustedGross * 0.12).toFixed(2);\n//           const ESI = +(adjustedGross * 0.0075).toFixed(2);\n//           const TDS = +(adjustedGross * 0.1).toFixed(2);\n//           const netSalary = +(adjustedGross - PF - ESI - TDS).toFixed(2);\n//           return {\n//             grossSalary,\n//             netSalary,\n//             PF,\n//             ESI,\n//             TDS,\n//             bonus,\n//             deduction\n//           };\n//         } catch {\n//           return null;\n//         }\n//       };\n//       const addRowWithPreview = async () => {\n//         const latest = await fetchLatestPreview();\n//         if (latest) {\n//           setRuns(prev => [\n//             {\n//               PayrollRunID: 'Preview',\n//               UserID: form.UserID,\n//               MonthYear: form.MonthYear,\n//               GrossSalary: latest.grossSalary,\n//               NetSalary: latest.netSalary,\n//               PF: latest.PF,\n//               ESI: latest.ESI,\n//               TDS: latest.TDS,\n//               SalaryAdjustment: (latest.bonus ? `+${latest.bonus}` : '') + (latest.deduction ? ` -${latest.deduction}` : ''),\n//             },\n//             ...prev\n//           ]);\n//         } else {\n//           fetchRuns();\n//         }\n//       };\n//       await addRowWithPreview();\n//       alert('Payroll run inserted successfully!');\n//     } catch (err) {\n//       alert(\n//         err?.response?.data?.message ||\n//         err?.response?.data?.error ||\n//         err?.message ||\n//         'Failed to insert payroll run'\n//       );\n//     }\n//     setLoading(false);\n//   };\n\n//   // Preview handler\n//   const handlePreview = async (e) => {\n//     e.preventDefault();\n//     const userIdNum = Number(form.UserID);\n//     const monthYearRegex = /^[A-Za-z]{3}-\\d{4}$/;\n//     if (!userIdNum || userIdNum < 1) {\n//       alert('Please enter a valid numeric UserID.');\n//       return;\n//     }\n//     if (!monthYearRegex.test(form.MonthYear)) {\n//       alert('Please enter MonthYear in format e.g. Sep-2025.');\n//       return;\n//     }\n//     setPreviewLoading(true);\n//     setPreview(null);\n//     try {\n//       const token = localStorage.getItem('token');\n//       // Fetch payroll base\n//       const baseRes = await axios.get(`http://localhost:3000/api/payroll-base/${form.UserID}`, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       const base = baseRes.data;\n//       // Fetch leaves\n//       const leaveRes = await axios.get(`http://localhost:3000/api/leaves/${form.UserID}`, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       const leaves = Array.isArray(leaveRes.data) ? leaveRes.data.filter(l => l.MonthYear === form.MonthYear) : [];\n//       const lop = leaves.filter(l => l.LeaveType === 'LOP').reduce((sum, l) => sum + Number(l.LeaveDays), 0);\n//       // Fetch salary adjustments\n//       const adjRes = await axios.get(`http://localhost:3000/api/adjustments/${form.UserID}`, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       const adjustments = Array.isArray(adjRes.data) ? adjRes.data.filter(a => a.MonthYear === form.MonthYear) : [];\n//       const bonus = adjustments.filter(a => a.AdjustmentType === 'Bonus').reduce((sum, a) => sum + Number(a.Amount), 0);\n//       const deduction = adjustments.filter(a => a.AdjustmentType === 'Deduction').reduce((sum, a) => sum + Number(a.Amount), 0);\n//       // Calculate gross salary\n//       let grossSalary = Number(base.BasicSalary || 0) + Number(base.HRA || 0) + Number(base.DA || 0) + Number(base.OtherAllowance || 0);\n//       const lopDeduction = +(lop * (grossSalary / 30)).toFixed(2);\n//       grossSalary -= lopDeduction;\n//       const adjustedGross = grossSalary + bonus - deduction;\n//       const PF = +(adjustedGross * 0.12).toFixed(2);\n//       const ESI = +(adjustedGross * 0.0075).toFixed(2);\n//       const TDS = +(adjustedGross * 0.1).toFixed(2);\n//       const netSalary = +(adjustedGross - PF - ESI - TDS).toFixed(2);\n//       setPreview({\n//         base,\n//         leaves,\n//         adjustments,\n//         grossSalary,\n//         lop,\n//         lopDeduction,\n//         bonus,\n//         deduction,\n//         adjustedGross,\n//         PF,\n//         ESI,\n//         TDS,\n//         netSalary\n//       });\n//     } catch (err) {\n//       alert('Preview fetch failed: ' + (err?.response?.data?.message || err?.message));\n//     }\n//     setPreviewLoading(false);\n//   };\n\n//   return (\n//     <div className=\"payrollrun-container\">\n//       <h2 className=\"payrollrun-title\">Payroll Run Records</h2>\n//       {/* Payroll Run Insert Form */}\n//       <form className=\"payrollrun-form\" onSubmit={handleSubmit} style={{ marginBottom: 24, display: 'flex', gap: 16, alignItems: 'center', flexWrap: 'wrap' }}>\n//         <input\n//           name=\"UserID\"\n//           value={form.UserID}\n//           onChange={handleChange}\n//           placeholder=\"UserID\"\n//           required\n//           className=\"payrollrun-input\"\n//         />\n//         <input\n//           name=\"MonthYear\"\n//           value={form.MonthYear}\n//           onChange={handleChange}\n//           placeholder=\"MonthYear (e.g. Sep-2025)\"\n//           required\n//           className=\"payrollrun-input\"\n//         />\n//         <button className=\"payrollrun-btn\" type=\"submit\" disabled={loading}>\n//           {loading ? 'Submitting...' : 'Insert Payroll Run'}\n//         </button>\n//         <button className=\"payrollrun-btn\" type=\"button\" style={{ background: '#e0e7ff', color: '#2563eb' }} onClick={handlePreview} disabled={previewLoading}>\n//           {previewLoading ? 'Loading...' : 'Preview'}\n//         </button>\n//       </form>\n//       {/* Preview Section */}\n//       {preview && (\n//         <div style={{ background: '#f3f4f6', borderRadius: 8, padding: 16, marginBottom: 24 }}>\n//           <h3 style={{ marginTop: 0 }}>Payroll Preview</h3>\n//           <div><b>Gross Salary:</b> ₹{preview.grossSalary}</div>\n//           <div><b>LOP Days:</b> {preview.lop} <b>LOP Deduction:</b> ₹{preview.lopDeduction}</div>\n//           <div><b>Bonus:</b> ₹{preview.bonus} <b>Deduction:</b> ₹{preview.deduction}</div>\n//           <div><b>Adjusted Gross:</b> ₹{preview.adjustedGross}</div>\n//           <div><b>PF:</b> ₹{preview.PF} <b>ESI:</b> ₹{preview.ESI} <b>TDS:</b> ₹{preview.TDS}</div>\n//           <div><b>Net Salary:</b> ₹{preview.netSalary}</div>\n//           <hr style={{margin:'16px 0'}} />\n//           <div>\n//             <b>Payroll Base:</b>\n//             <pre style={{background:'#fff',padding:'8px',borderRadius:'6px',overflowX:'auto'}}>{JSON.stringify(preview.base, null, 2)}</pre>\n//           </div>\n//           <div>\n//             <b>Leave Records (for month):</b>\n//             <pre style={{background:'#fff',padding:'8px',borderRadius:'6px',overflowX:'auto'}}>{JSON.stringify(preview.leaves, null, 2)}</pre>\n//           </div>\n//           <div>\n//             <b>Salary Adjustments (for month):</b>\n//             <pre style={{background:'#fff',padding:'8px',borderRadius:'6px',overflowX:'auto'}}>{JSON.stringify(preview.adjustments, null, 2)}</pre>\n//           </div>\n//         </div>\n//       )}\n//       <div className=\"payrollrun-table\">\n//         <table className=\"payrollrun-table-wrapper\">\n//           <thead>\n//             <tr>\n//               <th style={{ textAlign: 'center' }}>PayrollRunID</th>\n//               <th style={{ textAlign: 'center' }}>UserID</th>\n//               <th style={{ textAlign: 'center' }}>Month/Year</th>\n//               <th style={{ textAlign: 'center' }}>Gross Salary</th>\n//               <th style={{ textAlign: 'center' }}>Net Salary</th>\n//               <th style={{ textAlign: 'center' }}>PF</th>\n//               <th style={{ textAlign: 'center' }}>ESI</th>\n//               <th style={{ textAlign: 'center' }}>TDS</th>\n//               <th style={{ textAlign: 'center' }}>Salary Adjustment</th>\n//               <th style={{ textAlign: 'center' }}>Delete</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {runs.length === 0 ? (\n//               <tr><td colSpan={10} style={{ textAlign: 'center' }}>No payroll runs found.</td></tr>\n//             ) : (\n//               runs.map((run) => (\n//                 <tr key={run.PayrollRunID}>\n//                   <td style={{ textAlign: 'center' }}>{run.PayrollRunID}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.UserID}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.MonthYear}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.GrossSalary}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.NetSalary}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.PF}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.ESI}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.TDS}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.SalaryAdjustment\n//                     ? run.SalaryAdjustment.replace(/\\+0*([1-9]\\d*|0)(\\.\\d+)?/g, '+$1$2').replace(/-0*([1-9]\\d*|0)(\\.\\d+)?/g, '-$1$2')\n//                     : ''}\n//                   </td>\n//                   <td style={{ textAlign: 'center' }}>\n//                     <button\n//                       className=\"payrollrun-btn\"\n//                       style={{ background: '#e53e3e', color: '#fff' }}\n//                       onClick={async () => {\n//                         // Prevent deleting preview rows\n//                         if (run.PayrollRunID === 'Preview') {\n//                           alert('Cannot delete preview data. Please refresh the page to remove preview.');\n//                           return;\n//                         }\n\n//                         if (!window.confirm('Are you sure you want to delete this payroll run?')) return;\n//                         const token = localStorage.getItem('token');\n//                         try {\n//                           await axios.delete(`${API_BASE_URL}/${run.PayrollRunID}`, {\n//                             headers: { Authorization: `Bearer ${token}` }\n//                           });\n//                           fetchRuns();\n//                           alert('Payroll run deleted!');\n//                         } catch (err) {\n//                           alert('Delete failed: ' + (err.response?.data?.message || err.message));\n//                         }\n//                       }}\n//                       disabled={run.PayrollRunID === 'Preview'}\n//                     >\n//                       Delete\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PayrollRunPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchRuns, insertRun, deleteRun, fetchPreview } from \"./payrollRunService\";\nimport PayrollRunForm from \"./PayrollRunForm\";\nimport PayrollRunPreview from \"./PayrollRunPreview\";\nimport PayrollRunTable from \"./PayrollRunTable\";\nimport \"./PayrollRunPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PayrollRunPage = () => {\n  _s();\n  const [runs, setRuns] = useState([]);\n  const [form, setForm] = useState({\n    UserID: \"\",\n    MonthYear: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const [preview, setPreview] = useState(null);\n  const [previewLoading, setPreviewLoading] = useState(false);\n  useEffect(() => {\n    loadRuns();\n  }, []);\n  const loadRuns = async () => {\n    try {\n      const data = await fetchRuns();\n      setRuns(data);\n    } catch {\n      alert(\"Failed to fetch payroll runs\");\n    }\n  };\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      await insertRun(form);\n      const latest = await fetchPreview(form.UserID, form.MonthYear);\n      if (latest) {\n        setRuns(prev => [{\n          PayrollRunID: \"Preview\",\n          UserID: form.UserID,\n          MonthYear: form.MonthYear,\n          ...latest,\n          SalaryAdjustment: `${latest.bonus ? \"+\" + latest.bonus : \"\"}${latest.deduction ? \" -\" + latest.deduction : \"\"}`\n        }, ...prev]);\n      } else {\n        loadRuns();\n      }\n      setForm({\n        UserID: \"\",\n        MonthYear: \"\"\n      });\n      alert(\"Payroll run inserted successfully!\");\n    } catch (err) {\n      var _err$response, _err$response$data;\n      alert(\"Insert failed: \" + ((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message));\n    }\n    setLoading(false);\n  };\n  const handlePreview = async () => {\n    setPreviewLoading(true);\n    try {\n      const latest = await fetchPreview(form.UserID, form.MonthYear);\n      setPreview(latest);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      alert(\"Preview failed: \" + ((err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message));\n    }\n    setPreviewLoading(false);\n  };\n  const handleDelete = async run => {\n    if (run.PayrollRunID === \"Preview\") {\n      alert(\"Cannot delete preview data. Refresh the page to clear preview.\");\n      return;\n    }\n    if (!window.confirm(\"Delete this payroll run?\")) return;\n    try {\n      await deleteRun(run.PayrollRunID);\n      loadRuns();\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      alert(\"Delete failed: \" + ((err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payrollrun-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"payrollrun-title\",\n      children: \"Payroll Run Records\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PayrollRunForm, {\n      form: form,\n      loading: loading,\n      previewLoading: previewLoading,\n      onChange: handleChange,\n      onSubmit: handleSubmit,\n      onPreview: handlePreview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PayrollRunPreview, {\n      preview: preview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PayrollRunTable, {\n      runs: runs,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 5\n  }, this);\n};\n_s(PayrollRunPage, \"dOPQjs39rkRQ2IkZPTp/9zGggWo=\");\n_c = PayrollRunPage;\nexport default PayrollRunPage;\nvar _c;\n$RefreshReg$(_c, \"PayrollRunPage\");","map":{"version":3,"names":["React","useEffect","useState","fetchRuns","insertRun","deleteRun","fetchPreview","PayrollRunForm","PayrollRunPreview","PayrollRunTable","jsxDEV","_jsxDEV","PayrollRunPage","_s","runs","setRuns","form","setForm","UserID","MonthYear","loading","setLoading","preview","setPreview","previewLoading","setPreviewLoading","loadRuns","data","alert","handleChange","e","target","name","value","handleSubmit","preventDefault","latest","prev","PayrollRunID","SalaryAdjustment","bonus","deduction","err","_err$response","_err$response$data","response","message","handlePreview","_err$response2","_err$response2$data","handleDelete","run","window","confirm","_err$response3","_err$response3$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onSubmit","onPreview","onDelete","_c","$RefreshReg$"],"sources":["/Users/jyotirathore101098/Documents/Payroll_Mavens/frontend/src/pages/payrollRun/PayrollRunPage.js"],"sourcesContent":["// // PayrollRunPage.js\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import './PayrollRunPage.css';\n\n// const API_BASE_URL = 'http://localhost:3000/api/payroll-runs';\n\n\n// const PayrollRunPage = () => {\n//   const [runs, setRuns] = useState([]);\n//   const [form, setForm] = useState({\n//     UserID: '',\n//     MonthYear: '',\n//   });\n//   const [loading, setLoading] = useState(false);\n//   const [preview, setPreview] = useState(null);\n//   const [previewLoading, setPreviewLoading] = useState(false);\n\n//   useEffect(() => {\n//     fetchRuns();\n//   }, []);\n\n//   const fetchRuns = async () => {\n//     try {\n//       const token = localStorage.getItem('token');\n//       const res = await axios.get(API_BASE_URL, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       setRuns(res.data);\n//     } catch (err) {\n//       alert('Failed to fetch payroll runs');\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     setForm({ ...form, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     // Frontend validation\n//     const userIdNum = Number(form.UserID);\n//     const monthYearRegex = /^[A-Za-z]{3}-\\d{4}$/;\n//     if (!userIdNum || userIdNum < 1) {\n//       alert('Please enter a valid numeric UserID.');\n//       return;\n//     }\n//     if (!monthYearRegex.test(form.MonthYear)) {\n//       alert('Please enter MonthYear in format e.g. Sep-2025.');\n//       return;\n//     }\n//     setLoading(true);\n//     try {\n//       const token = localStorage.getItem('token');\n//       await axios.post(API_BASE_URL, form, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       setForm({ UserID: '', MonthYear: '' });\n//       // Instead of refetching all, add preview data as new row\n//       // Always fetch latest preview before inserting row\n//       const fetchLatestPreview = async () => {\n//         try {\n//           const token = localStorage.getItem('token');\n//           // Fetch payroll base\n//           const baseRes = await axios.get(`http://localhost:3000/api/payroll-base/${form.UserID}`, {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           const base = baseRes.data;\n//           // Fetch leaves\n//           const leaveRes = await axios.get(`http://localhost:3000/api/leaves/${form.UserID}`, {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           const leaves = Array.isArray(leaveRes.data) ? leaveRes.data.filter(l => l.MonthYear === form.MonthYear) : [];\n//           const lop = leaves.filter(l => l.LeaveType === 'LOP').reduce((sum, l) => sum + Number(l.LeaveDays), 0);\n//           // Fetch salary adjustments\n//           const adjRes = await axios.get(`http://localhost:3000/api/adjustments/${form.UserID}`, {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           const adjustments = Array.isArray(adjRes.data) ? adjRes.data.filter(a => a.MonthYear === form.MonthYear) : [];\n//           const bonus = adjustments.filter(a => a.AdjustmentType === 'Bonus').reduce((sum, a) => sum + Number(a.Amount), 0);\n//           const deduction = adjustments.filter(a => a.AdjustmentType === 'Deduction').reduce((sum, a) => sum + Number(a.Amount), 0);\n//           // Calculate gross salary\n//           let grossSalary = Number(base.BasicSalary || 0) + Number(base.HRA || 0) + Number(base.DA || 0) + Number(base.OtherAllowance || 0);\n//           const lopDeduction = +(lop * (grossSalary / 30)).toFixed(2);\n//           grossSalary -= lopDeduction;\n//           const adjustedGross = grossSalary + bonus - deduction;\n//           const PF = +(adjustedGross * 0.12).toFixed(2);\n//           const ESI = +(adjustedGross * 0.0075).toFixed(2);\n//           const TDS = +(adjustedGross * 0.1).toFixed(2);\n//           const netSalary = +(adjustedGross - PF - ESI - TDS).toFixed(2);\n//           return {\n//             grossSalary,\n//             netSalary,\n//             PF,\n//             ESI,\n//             TDS,\n//             bonus,\n//             deduction\n//           };\n//         } catch {\n//           return null;\n//         }\n//       };\n//       const addRowWithPreview = async () => {\n//         const latest = await fetchLatestPreview();\n//         if (latest) {\n//           setRuns(prev => [\n//             {\n//               PayrollRunID: 'Preview',\n//               UserID: form.UserID,\n//               MonthYear: form.MonthYear,\n//               GrossSalary: latest.grossSalary,\n//               NetSalary: latest.netSalary,\n//               PF: latest.PF,\n//               ESI: latest.ESI,\n//               TDS: latest.TDS,\n//               SalaryAdjustment: (latest.bonus ? `+${latest.bonus}` : '') + (latest.deduction ? ` -${latest.deduction}` : ''),\n//             },\n//             ...prev\n//           ]);\n//         } else {\n//           fetchRuns();\n//         }\n//       };\n//       await addRowWithPreview();\n//       alert('Payroll run inserted successfully!');\n//     } catch (err) {\n//       alert(\n//         err?.response?.data?.message ||\n//         err?.response?.data?.error ||\n//         err?.message ||\n//         'Failed to insert payroll run'\n//       );\n//     }\n//     setLoading(false);\n//   };\n\n//   // Preview handler\n//   const handlePreview = async (e) => {\n//     e.preventDefault();\n//     const userIdNum = Number(form.UserID);\n//     const monthYearRegex = /^[A-Za-z]{3}-\\d{4}$/;\n//     if (!userIdNum || userIdNum < 1) {\n//       alert('Please enter a valid numeric UserID.');\n//       return;\n//     }\n//     if (!monthYearRegex.test(form.MonthYear)) {\n//       alert('Please enter MonthYear in format e.g. Sep-2025.');\n//       return;\n//     }\n//     setPreviewLoading(true);\n//     setPreview(null);\n//     try {\n//       const token = localStorage.getItem('token');\n//       // Fetch payroll base\n//       const baseRes = await axios.get(`http://localhost:3000/api/payroll-base/${form.UserID}`, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       const base = baseRes.data;\n//       // Fetch leaves\n//       const leaveRes = await axios.get(`http://localhost:3000/api/leaves/${form.UserID}`, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       const leaves = Array.isArray(leaveRes.data) ? leaveRes.data.filter(l => l.MonthYear === form.MonthYear) : [];\n//       const lop = leaves.filter(l => l.LeaveType === 'LOP').reduce((sum, l) => sum + Number(l.LeaveDays), 0);\n//       // Fetch salary adjustments\n//       const adjRes = await axios.get(`http://localhost:3000/api/adjustments/${form.UserID}`, {\n//         headers: { Authorization: `Bearer ${token}` }\n//       });\n//       const adjustments = Array.isArray(adjRes.data) ? adjRes.data.filter(a => a.MonthYear === form.MonthYear) : [];\n//       const bonus = adjustments.filter(a => a.AdjustmentType === 'Bonus').reduce((sum, a) => sum + Number(a.Amount), 0);\n//       const deduction = adjustments.filter(a => a.AdjustmentType === 'Deduction').reduce((sum, a) => sum + Number(a.Amount), 0);\n//       // Calculate gross salary\n//       let grossSalary = Number(base.BasicSalary || 0) + Number(base.HRA || 0) + Number(base.DA || 0) + Number(base.OtherAllowance || 0);\n//       const lopDeduction = +(lop * (grossSalary / 30)).toFixed(2);\n//       grossSalary -= lopDeduction;\n//       const adjustedGross = grossSalary + bonus - deduction;\n//       const PF = +(adjustedGross * 0.12).toFixed(2);\n//       const ESI = +(adjustedGross * 0.0075).toFixed(2);\n//       const TDS = +(adjustedGross * 0.1).toFixed(2);\n//       const netSalary = +(adjustedGross - PF - ESI - TDS).toFixed(2);\n//       setPreview({\n//         base,\n//         leaves,\n//         adjustments,\n//         grossSalary,\n//         lop,\n//         lopDeduction,\n//         bonus,\n//         deduction,\n//         adjustedGross,\n//         PF,\n//         ESI,\n//         TDS,\n//         netSalary\n//       });\n//     } catch (err) {\n//       alert('Preview fetch failed: ' + (err?.response?.data?.message || err?.message));\n//     }\n//     setPreviewLoading(false);\n//   };\n\n//   return (\n//     <div className=\"payrollrun-container\">\n//       <h2 className=\"payrollrun-title\">Payroll Run Records</h2>\n//       {/* Payroll Run Insert Form */}\n//       <form className=\"payrollrun-form\" onSubmit={handleSubmit} style={{ marginBottom: 24, display: 'flex', gap: 16, alignItems: 'center', flexWrap: 'wrap' }}>\n//         <input\n//           name=\"UserID\"\n//           value={form.UserID}\n//           onChange={handleChange}\n//           placeholder=\"UserID\"\n//           required\n//           className=\"payrollrun-input\"\n//         />\n//         <input\n//           name=\"MonthYear\"\n//           value={form.MonthYear}\n//           onChange={handleChange}\n//           placeholder=\"MonthYear (e.g. Sep-2025)\"\n//           required\n//           className=\"payrollrun-input\"\n//         />\n//         <button className=\"payrollrun-btn\" type=\"submit\" disabled={loading}>\n//           {loading ? 'Submitting...' : 'Insert Payroll Run'}\n//         </button>\n//         <button className=\"payrollrun-btn\" type=\"button\" style={{ background: '#e0e7ff', color: '#2563eb' }} onClick={handlePreview} disabled={previewLoading}>\n//           {previewLoading ? 'Loading...' : 'Preview'}\n//         </button>\n//       </form>\n//       {/* Preview Section */}\n//       {preview && (\n//         <div style={{ background: '#f3f4f6', borderRadius: 8, padding: 16, marginBottom: 24 }}>\n//           <h3 style={{ marginTop: 0 }}>Payroll Preview</h3>\n//           <div><b>Gross Salary:</b> ₹{preview.grossSalary}</div>\n//           <div><b>LOP Days:</b> {preview.lop} <b>LOP Deduction:</b> ₹{preview.lopDeduction}</div>\n//           <div><b>Bonus:</b> ₹{preview.bonus} <b>Deduction:</b> ₹{preview.deduction}</div>\n//           <div><b>Adjusted Gross:</b> ₹{preview.adjustedGross}</div>\n//           <div><b>PF:</b> ₹{preview.PF} <b>ESI:</b> ₹{preview.ESI} <b>TDS:</b> ₹{preview.TDS}</div>\n//           <div><b>Net Salary:</b> ₹{preview.netSalary}</div>\n//           <hr style={{margin:'16px 0'}} />\n//           <div>\n//             <b>Payroll Base:</b>\n//             <pre style={{background:'#fff',padding:'8px',borderRadius:'6px',overflowX:'auto'}}>{JSON.stringify(preview.base, null, 2)}</pre>\n//           </div>\n//           <div>\n//             <b>Leave Records (for month):</b>\n//             <pre style={{background:'#fff',padding:'8px',borderRadius:'6px',overflowX:'auto'}}>{JSON.stringify(preview.leaves, null, 2)}</pre>\n//           </div>\n//           <div>\n//             <b>Salary Adjustments (for month):</b>\n//             <pre style={{background:'#fff',padding:'8px',borderRadius:'6px',overflowX:'auto'}}>{JSON.stringify(preview.adjustments, null, 2)}</pre>\n//           </div>\n//         </div>\n//       )}\n//       <div className=\"payrollrun-table\">\n//         <table className=\"payrollrun-table-wrapper\">\n//           <thead>\n//             <tr>\n//               <th style={{ textAlign: 'center' }}>PayrollRunID</th>\n//               <th style={{ textAlign: 'center' }}>UserID</th>\n//               <th style={{ textAlign: 'center' }}>Month/Year</th>\n//               <th style={{ textAlign: 'center' }}>Gross Salary</th>\n//               <th style={{ textAlign: 'center' }}>Net Salary</th>\n//               <th style={{ textAlign: 'center' }}>PF</th>\n//               <th style={{ textAlign: 'center' }}>ESI</th>\n//               <th style={{ textAlign: 'center' }}>TDS</th>\n//               <th style={{ textAlign: 'center' }}>Salary Adjustment</th>\n//               <th style={{ textAlign: 'center' }}>Delete</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {runs.length === 0 ? (\n//               <tr><td colSpan={10} style={{ textAlign: 'center' }}>No payroll runs found.</td></tr>\n//             ) : (\n//               runs.map((run) => (\n//                 <tr key={run.PayrollRunID}>\n//                   <td style={{ textAlign: 'center' }}>{run.PayrollRunID}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.UserID}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.MonthYear}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.GrossSalary}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.NetSalary}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.PF}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.ESI}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.TDS}</td>\n//                   <td style={{ textAlign: 'center' }}>{run.SalaryAdjustment\n//                     ? run.SalaryAdjustment.replace(/\\+0*([1-9]\\d*|0)(\\.\\d+)?/g, '+$1$2').replace(/-0*([1-9]\\d*|0)(\\.\\d+)?/g, '-$1$2')\n//                     : ''}\n//                   </td>\n//                   <td style={{ textAlign: 'center' }}>\n//                     <button\n//                       className=\"payrollrun-btn\"\n//                       style={{ background: '#e53e3e', color: '#fff' }}\n//                       onClick={async () => {\n//                         // Prevent deleting preview rows\n//                         if (run.PayrollRunID === 'Preview') {\n//                           alert('Cannot delete preview data. Please refresh the page to remove preview.');\n//                           return;\n//                         }\n                        \n//                         if (!window.confirm('Are you sure you want to delete this payroll run?')) return;\n//                         const token = localStorage.getItem('token');\n//                         try {\n//                           await axios.delete(`${API_BASE_URL}/${run.PayrollRunID}`, {\n//                             headers: { Authorization: `Bearer ${token}` }\n//                           });\n//                           fetchRuns();\n//                           alert('Payroll run deleted!');\n//                         } catch (err) {\n//                           alert('Delete failed: ' + (err.response?.data?.message || err.message));\n//                         }\n//                       }}\n//                       disabled={run.PayrollRunID === 'Preview'}\n//                     >\n//                       Delete\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PayrollRunPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchRuns, insertRun, deleteRun, fetchPreview } from \"./payrollRunService\";\nimport PayrollRunForm from \"./PayrollRunForm\";\nimport PayrollRunPreview from \"./PayrollRunPreview\";\nimport PayrollRunTable from \"./PayrollRunTable\";\nimport \"./PayrollRunPage.css\";\n\nconst PayrollRunPage = () => {\n  const [runs, setRuns] = useState([]);\n  const [form, setForm] = useState({ UserID: \"\", MonthYear: \"\" });\n  const [loading, setLoading] = useState(false);\n  const [preview, setPreview] = useState(null);\n  const [previewLoading, setPreviewLoading] = useState(false);\n\n  useEffect(() => {\n    loadRuns();\n  }, []);\n\n  const loadRuns = async () => {\n    try {\n      const data = await fetchRuns();\n      setRuns(data);\n    } catch {\n      alert(\"Failed to fetch payroll runs\");\n    }\n  };\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      await insertRun(form);\n      const latest = await fetchPreview(form.UserID, form.MonthYear);\n      if (latest) {\n        setRuns((prev) => [\n          { PayrollRunID: \"Preview\", UserID: form.UserID, MonthYear: form.MonthYear, ...latest, SalaryAdjustment: `${latest.bonus ? \"+\"+latest.bonus : \"\"}${latest.deduction ? \" -\"+latest.deduction : \"\"}` },\n          ...prev,\n        ]);\n      } else {\n        loadRuns();\n      }\n      setForm({ UserID: \"\", MonthYear: \"\" });\n      alert(\"Payroll run inserted successfully!\");\n    } catch (err) {\n      alert(\"Insert failed: \" + (err?.response?.data?.message || err.message));\n    }\n    setLoading(false);\n  };\n\n  const handlePreview = async () => {\n    setPreviewLoading(true);\n    try {\n      const latest = await fetchPreview(form.UserID, form.MonthYear);\n      setPreview(latest);\n    } catch (err) {\n      alert(\"Preview failed: \" + (err?.response?.data?.message || err.message));\n    }\n    setPreviewLoading(false);\n  };\n\n  const handleDelete = async (run) => {\n    if (run.PayrollRunID === \"Preview\") {\n      alert(\"Cannot delete preview data. Refresh the page to clear preview.\");\n      return;\n    }\n    if (!window.confirm(\"Delete this payroll run?\")) return;\n    try {\n      await deleteRun(run.PayrollRunID);\n      loadRuns();\n    } catch (err) {\n      alert(\"Delete failed: \" + (err?.response?.data?.message || err.message));\n    }\n  };\n\n  return (\n    <div className=\"payrollrun-container\">\n      <h2 className=\"payrollrun-title\">Payroll Run Records</h2>\n      <PayrollRunForm form={form} loading={loading} previewLoading={previewLoading} onChange={handleChange} onSubmit={handleSubmit} onPreview={handlePreview} />\n      <PayrollRunPreview preview={preview} />\n      <PayrollRunTable runs={runs} onDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default PayrollRunPage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}